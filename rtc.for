C **********************************************************************
C *                                                                    *
C * RTC.FOR - DRIVER FOR VIRTC.MAC                                     *
C *                                                                    *
C * VIRTC CONTAINS SUPPORT FUNCTIONS FOR VECTOR INTERRUPT AND REAL     *
C * TIME CLOCK INTERRUPTS. SEE VIRTC.MAC FOR BOARD STRAPPING.          *
C *                                                                    *
C * $EI, $DI - ENABLE AND DISABLE INTERRUPTS                           *
C * RTCON, RTCOFF - TURN RTC INTERRUPTS ON AND OFF, RESET TICKS        *
C * I = RTCTKS(0) - RETURN TICKS PER SECOND (NORMALLY 10 OR 60)        *
C * RTCGET(L) - RETURN INTEGER*4 TICKS SINCE RTCON                     *
C *                                                                    *
C **********************************************************************
C
      PROGRAM RTC
      INCLUDE VIRTC.INC
      INTEGER IRTC
      INTEGER I
      REAL X, Y, Z
      INTEGER*4 T1, T2, T3
C
C IF WE USE VIRTC FOR SHEDULING, WE WILL USE EI AND DI AS THE LEAST
C EXPENSIVE CRITICAL SECTION. $EI AND $DI EXPOSE THESE INSTRUCTIONS.
C
C NOTE THAT THE INTE LINE IS BROUGHT OUT AS THE AUDIO OUTPUT ON THE
C ALTAIR, AND IS DISPLAYED AS THE INTE LED.
C
      CALL $EI
      CALL $DI
C
C VI/RTC IS STRAPPED TO PRODUCE PERIODIC INTERRUPTS. WE ASSUME
C 10 OR 60 PER SECOND. 6, 100, 1000 AND 10000 ARE POSSIBLE, AS
C ARE 0.6 AND 0.06. CODE SHOULD USE RTCTKS TO DETERMINE THE
C RATE, AND WORK AT (6, 10, 60 AND 100) PER SECOND.
C
      IRTC = RTCTKS(0)
      WRITE (1, 301) IRTC
  301 FORMAT (1X, 'RTC ', I6, ' TICKS/SECOND')
C
C TURN ON THE RTC. INTERRUPTS NOW COME IN, UNTIL RTCOFF IS
C CALLED.
C
      CALL RTCON
C
C LET US TIME 1000 FLOATING POINT MULTIPLICATIONS
C NOTE THAT THE LOOP OVERHEAD IS 9 INSTRUCTIONS,
C SO ONLY 9000 INSTRUCTIONS TOTAL
C
      X = 2.5
      Y = 1.5
      CALL RTCGET(T1)
      DO 1 I = 1, 1000
        Z = X * Y
    1 CONTINUE
      CALL RTCGET(T2)
C
C BE CAREFUL WITH INTEGER*4 IN FORTRAN-80. THIS FEATURE WAS
C INTRODUCED LATE, AND PROBABLY HAS DEFECTS. IT ALSO HAS
C LIMITED UTILITY - CAN'T USE IT FOR DO LOOP, CAN'T USE IT
C IN I/O. WE DO USE IT AS THE RETURN TYPE FOR RTCGET, TO
C TO ALLOW US OVER 10 YEARS OF TICKS BEFORE RUNNING OUT OF
C 32 BIT COUNTER.
C
C CONVERSION TO INTEGER MEANS THAT WE CAN COUNT 6553 SECONDS
C (1.82 HOURS) WITH 0.1 SECONDS ACCURACY.
C
      T3 = T2 - T1
      IF (T3 .GT. 65535) GO TO 2
      I = T3
      WRITE (1, 302) I
  302 FORMAT (1X, 'LOOP TIME IN TICKS = ', I6)
C
      CALL RTCOFF
      CALL EXIT
C
C ERROR EXIT. NOTE THAT ALL EXITS SHOULD TURN OFF THE RTC
C INTERRUPT, OTHERWISE THERE WILL BE A FUTURE CRASH.
C
    2 CALL RTCOFF
      STOP TIKOVF
      END

